{"version":3,"sources":["constants.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","wait","warn","className","length","character","index","src","alt","type","onClick","Arena","boss","setBoss","attackState","setAttackState","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","value","max","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","checkNetwork","networkVersion","fetchNFTMetadata","provider","txn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bc17784.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = \"0xC57d292f0FA2f0810B4c812C0331c94E9051d948\";\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n\n        /*\n         * Call contract to get all mint-able characters\n         */\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn);\n\n        /*\n         * Go through all of our characters and transform the data\n         */\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        /*\n         * Set all mint-able characters in state\n         */\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n  const mintCharacterNFTAction = async (characterId) => {\n    try {\n      if (gameContract) {\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n    }\n  };\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          onClick={() => mintCharacterNFTAction(index)}\n          className=\"character-mint-button\"\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\n\n/*\n * We pass in our characterNFT metadata so we can show a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  // UseEffects\n  const [attackState, setAttackState] = useState(\"\");\n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n     * Setup logic when this event is fired off\n     */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /*\n       * Update both player and boss Hp\n       */\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n\n    /*\n     * Make sure to clean up this event when this component is removed\n     */\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackComplete\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n        setAttackState(\"hit\");\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  // State\n\n  // UseEffects\n  useEffect(() => {\n    /*\n     * Setup async function that will get the boss from our contract and sets in state\n     */\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    if (gameContract) {\n      /*\n       * gameContract is ready to go! Let's fetch our boss\n       */\n      fetchBoss();\n    }\n  }, [gameContract]);\n\n  return (\n    <div className=\"arena-container\">\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Replace your Character UI with this */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\";\nimport Arena from \"./Components/Arena\";\n// Constants\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  /*\n   * Right under current account, setup this new state property\n   */\n  const [characterNFT, setCharacterNFT] = useState(null);\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const renderContent = () => {\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n      /*\n       * If there is a connected wallet and characterNFT, it's time to battle!\n       */\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n      );\n    }\n  };\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    const checkNetwork = async () => {\n      try {\n        if (window.ethereum.networkVersion !== \"4\") {\n          alert(\"Please connect to Rinkeby!\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (currentAccount) {\n      checkNetwork();\n    }\n  }, [currentAccount]);\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    };\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to KILL the Metaverse!</p>\n          {/* This is where our button and image code used to be!\n           *\tRemember we moved it into the render method.\n           */}\n          {renderContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}